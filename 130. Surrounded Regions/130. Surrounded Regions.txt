/**
 * @param {character[][]} board
 * @return {void} Do not return anything, modify board in-place instead.
 */
var solve = function(board) {
    let rows = board.length;
    let cols = board[0].length;

    function dfs(r,c){
        if(r < 0 || c < 0 || r >= rows || c >= cols || board[r][c] != 'O'){
            return;
        }
        board[r][c] = 'T'

        dfs(r+1, c)
        dfs(r-1, c)
        dfs(r, c+1)
        dfs(r, c-1)
    }


    for(let i=0 ;i <cols; i++){
        if(board[0][i] === 'O') {dfs(0, i)}
        if(board[rows-1][i] === 'O') {dfs(rows-1, i)}
        
    }

    for(let i=0 ;i <rows; i++){
        if(board[i][0] === 'O'){dfs(i, 0)}
        if(board[i][cols-1] === 'O'){dfs(i, cols-1)}
    }


    for(let i=0 ;i<rows; i++){
        for(let j=0; j<cols; j++){
            if(board[i][j] === 'T'){
                board[i][j] = 'O'
            }else if(board[i][j] === 'O'){
                board[i][j] = 'X'
            }
        }
    }
};