class MinPriorityQueueJOEL {
    constructor(k=0) {
        this.heap = []
        this.k = k
    }
    parent(i) {
        return Math.floor((i - 1) / 2)
    }
    leftChild(i) {
        return 2 * i + 1
    }
    rightChild(i) {
        return 2 * i + 2
    }

    swap(i1, i2) {
        [this.heap[i1], this.heap[i2]] = [this.heap[i2], this.heap[i1]]
    }

    //PerlocateUP
    heapifyUp(i) {
        let parent = this.parent(i);
        if (i > 0 && this.heap[i][0] < this.heap[parent][0]) {
            this.swap(i, parent);
            this.heapifyUp(parent)
        }
    }
    //PerloccateDown
    heapifyDown(i) {
        let leftChild = this.leftChild(i);
        let rightChild = this.rightChild(i);
        let smallest = i;

        if (leftChild < this.heap.length && this.heap[leftChild][0] < this.heap[smallest][0]) {
            smallest = leftChild
        }
        if (rightChild < this.heap.length && this.heap[rightChild][0] < this.heap[smallest][0]) {
            smallest = rightChild
        }

        if (smallest != i) {
            this.swap(smallest, i);
            this.heapifyDown(smallest)
        }
    }

    enqueue(data, point) {
        this.heap.push([data, point]);
        this.heapifyUp(this.heap.length - 1)
    }

    dequeue() {
        if (!this.heap.length) return null;
        let min = this.heap[0];
        let endData = this.heap.pop();

        if (this.heap.length > 0) {
            this.heap[0] = endData;
            this.heapifyDown(0)
        }

        return min[1];
    }

    peek() {
        return this.heap[0]
    }

    size() {
        return this.heap.length
    }

    isEmpty() {
        return this.heap.length === 0
    }

    removeBasedOnK() {
        if (this.size() > this.k) {
            this.dequeue();
        }
    }
}

/**
 * @param {number[][]} points
 * @param {number} k
 * @return {number[][]}
 */
var kClosest = function(points, k) {
    let heap  = new MinPriorityQueueJOEL()

    function calculateDistance(x){
        let dis = Math.sqrt(x[0] ** 2 +  x[1] ** 2)
        return dis
    }


    for(let i=0; i<points.length; i++){
        heap.enqueue(calculateDistance(points[i]), points[i])
    }

    let finalArr = []
    while(k > 0){
        let x = heap.dequeue()
        finalArr.push(x)
        k--;
    }
    // console.log(heap)
    // console.log(finalArr)
    return finalArr
};