/**
 * @param {number[]} candidates
 * @param {number} target
 * @return {number[][]}
 */
var combinationSum2 = function(candidates, target) {
    
    candidates.sort((a,b)=>a-b);

    let res = []
    function backtracking(index, target, arr){
        //base
        if(0 === target){
            res.push([...arr]);
            return
        }
        if(target < 0 || index >= candidates.length) return;
        

        //INCLUDE
        arr.push(candidates[index])
        backtracking(index+1, target-candidates[index], arr)

        //EXCLUDE - if same as previous ignore
        arr.pop();
        let next = index+1
        while(next < candidates.length && candidates[index] === candidates[next]){
            next++;
        }
        backtracking(next, target, arr)

    }
    backtracking(0,target,[])
    return res
}; 
