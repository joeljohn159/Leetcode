/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} n
 * @return {ListNode}
 */
var removeNthFromEnd = function(head, n) {
    //double pass can be done easily. whats the logic behind single pass?

    // sliding window: 
    let dummy = new ListNode(0, head);
    let left = dummy
    let right = head
    let temp = n-1
    while(temp){
        right = right.next;
        temp--;
    }

    while(right.next){
        left = left.next;
        right = right.next
    }

    left.next = left.next.next || null;
    return dummy.next






};