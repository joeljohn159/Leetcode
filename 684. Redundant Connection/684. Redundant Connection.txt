/**
 * @param {number[][]} edges
 * @return {number[]}
 */
var findRedundantConnection = function(edges) {

    //This is a new tech I am learning - UNION -FIND

    let n = edges.length;
    let parent = Array(n).fill(null).map((_,i) => i);
    let rank = Array(n).fill(1)

    function find(node){
        if(parent[node] !== node){
            parent[node] = find(parent[node])
        }
        return parent[node]
    }

    function union(x, y){
        let root1 = find(x);
        let root2 = find(y);

        if(root1 === root2) return false;

        //UNION by ranking
        if(rank[root1] > rank[root2]){
            parent[root2] = root1
        }else if(rank[root2] > rank[root1]){
            parent[root1] = root2
        }else{
            parent[root2] = root1
            rank[root1]++;
        }

        return true
    }

    let last = []

    for(let [u,v] of edges){
        if(!union(u,v)){
            last = [u,v]
        }
    }

    return last
};