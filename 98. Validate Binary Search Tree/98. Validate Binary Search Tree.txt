/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isValidBST = function(root) {
    

  //This can be checked with In-Order traversal


//     let res = []
//   function InOrder(node){
//     if(!node){
//         return 
//     }
//     InOrder(node.left);
//     res.push(node.val);
//     InOrder(node.right);
//   }
// InOrder(root)
// //   console.log(res)


//   return res.length <= 1 || res.every((item, index)=> index === 0 || item >= res[index-1])


//Second method - by using min max

function helper(node, left, right){
    if(!node) return true;
    if(!(node.val > left && node.val < right)) return false;
    return (helper(node.left, left, node.val) && helper(node.right, node.val, right))
}
return helper(root, -Infinity, Infinity)
};