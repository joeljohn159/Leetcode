/**
 * @param {number} k
 * @param {number} w
 * @param {number[]} profits
 * @param {number[]} capital
 * @return {number}
 */

//Create Min Heap
class minHeap{
    constructor(){
        this.data = []
    }
    isEmpty() {
    return this.data.length === 0;
}

    push(ele){
        this.data.push(ele);
        this._bubbleUp(this.data.length-1)
    }

    pop(){
        if(this.isEmpty()) return;
        let max = this.data[0];
        let end = this.data.pop();
        if(!this.isEmpty()){
            this.data[0] = end;
            this._bubbleDown(0)
        }
        return max;
    }

    _bubbleUp(i){
        const { data } = this;
        while(i > 0){
            let parent = Math.floor((i-1)/2);
            if(data[parent][0] > data[i][0]){
                [data[parent], data[i]] =  [data[i], data[parent]];
                i = parent;
            }else break;
        }

    }

    _bubbleDown(i){
        const { data } = this;
        let l = 2*i + 1
        let r = 2*i + 2;
        let smallest = i;
        if(l < data.length && data[l][0] < data[smallest][0]) smallest = l;
        if(r < data.length && data[r][0] < data[smallest][0]) smallest = r;
        if(smallest === i){
            return;
        }else{
            [data[i], data[smallest]] = [data[smallest], data[i]];
            this._bubbleDown(smallest)
        }

    }

     peek(){
        return this.data[0];
    }
}



class maxHeap{
    constructor(){
        this.data = []
    }
    isEmpty() {
    return this.data.length === 0;
}

    push(ele){
        this.data.push(ele);
        this._bubbleUp(this.data.length-1)
    }

    pop(){
        if(this.isEmpty()) return;
        let max = this.data[0];
        let end = this.data.pop();
        if(!this.isEmpty()){
            this.data[0] = end;
            this._bubbleDown(0)
        }
        return max;
    }

    _bubbleUp(i){
        const { data } = this;
        while(i > 0){
            let parent = Math.floor((i-1)/2);
            if(data[parent] < data[i]){
                [data[parent], data[i]] =  [data[i], data[parent]];
                i = parent;
            }else break;
        }

    }

    _bubbleDown(i){
        const { data } = this;
        let l = 2*i + 1
        let r = 2*i + 2;
        let greater = i;
        if(l < data.length && data[l] > data[greater]) greater = l;
        if(r < data.length && data[r] > data[greater]) greater = r;
        if(greater === i){
            return;
        }else{
            [data[i], data[greater]] = [data[greater], data[i]];
            this._bubbleDown(greater)
        }

    }

    peek(){
        return this.data[0];
    }
}
var findMaximizedCapital = function(k, w, profits, capital) {

let minCapitalHeap = new minHeap();
let maxProfitHeap = new maxHeap();

//store all capitals in min heap
for(let i=0; i<capital.length; i++){
    minCapitalHeap.push([capital[i], profits[i]])
}


while( k > 0){
    //based on available capital. push it into maxHeap

    while(!minCapitalHeap.isEmpty() && minCapitalHeap.peek()[0] <= w){
        let ele = minCapitalHeap.pop();
        maxProfitHeap.push(ele[1])
    }

    if(maxProfitHeap.isEmpty()) break;

    w += maxProfitHeap.pop()
    k--;
}
   return w; 
}; 
