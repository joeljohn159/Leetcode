/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} left
 * @param {number} right
 * @return {ListNode}
 */
var reverseBetween = function(head, left, right) {
    // as it did not mention to do in place, I can try making a copy of reversed...
    let temp = head;
    let count = 0;
    let arr = []

    while(temp){
        arr.push(temp.val)
        temp = temp.next
    }

    let rev = arr.slice(left-1, right).reverse()
    arr.splice(left-1, rev.length, ...rev)

    temp = new ListNode(0, null)
    let start = temp;

    // console.log(/temp, arr)

    while(count < arr.length){
        temp.next = new ListNode(arr[count]);
        temp = temp.next
        count++;
    }

    return start.next
};