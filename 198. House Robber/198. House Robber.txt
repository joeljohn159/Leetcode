/**
 * @param {number[]} nums
 * @return {number}
 */
var rob = function(nums) {
    //Top Down using recursion

    // let n = nums.length;

    // let dp = {0 : nums[0], 1:Math.max(nums[0], nums[1])};

    // function helper(i){
    //     if(dp.hasOwnProperty(i)){
    //         return dp[i]
    //     }else{
    //         dp[i] = Math.max(helper(i-1), nums[i]+helper(i-2))
    //         return dp[i]
    //     }
    // }

    // return helper(n-1)


    // Bottom Up - Iterative
    let n = nums.length;
    if(n == 1) return nums[0];
    if(n == 2) return Math.max(nums[0], nums[1]);

    let dp = new Array(n);
    dp[0] = nums[0];
    dp[1] = Math.max(nums[0], nums[1]);

    for(let i= 2; i < n; i++){
        dp[i] = Math.max(nums[i] + dp[i-2], dp[i-1])
    }

    return dp[n-1]
};